name: Release workflow
run-name: ${{ github.actor }} triggered Release workflow

on:
  push:
    branches:
      - "main"

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}"
  GAR_LOCATION: "${{ secrets.GAR_LOCATION }}"
  SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL}}"
  SLACK_CHANNEL: "${{ secrets.GITHUBACTIONS_SLACK_CHANNEL }}"

jobs:
  build:
    permissions:
      contents: write
      id-token: write

    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Read VERSION file
        id: getversion
        run: | 
          sed -n 's/^appVersion:\(.*\)/\1/p' < chart/gateway-api/Chart.yaml > version
          echo "version=$(sed '/.*\"\(.*\)\".*/ s//\1/g' version)" >> $GITHUB_OUTPUT

      - name: Get Current Release
        id: get_current_release
        uses: joutvhu/get-release@v1
        with:
          tag_name: '${{ steps.getversion.outputs.version }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Existing Release
        id: check_existing_release
        run: |
          if [[ -n "${{ steps.get_current_release.outputs.id }}" ]]; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create the release
        id: create_release
        uses: comnoco/create-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.getversion.outputs.version }}'
          release_name: Release ${{ steps.getversion.outputs.version }}
          draft: false
          prerelease: false
        if: |
          steps.check_existing_release.outputs.release_exists == 'false'

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: Login to GAR
        id: garlogin
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PROJECT_ID }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Push Container
        id: build
        shell: bash
        env:
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GAR_NAME: ${{ secrets.GAR_NAME }}

        run: |-
          docker build -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:${{ github.sha }} -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:latest ./
          docker push --all-tags '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}

      - name: Run Notification
        id: runnotificationsent
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Running release build on {{ env.GITHUB_REF_NAME }} branch ${{ job.status }}
        if: always()