name: Deploy to PREPROD
run-name: ${{ github.actor }} triggered deploy to PREPROD pipeline

on:
  push:
    branches:
      - "preprod"

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}"
  GAR_LOCATION: "${{ secrets.GAR_LOCATION }}"
  SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL}}'
  SLACK_CHANNEL: '${{ secrets.GITHUBACTIONS_SLACK_CHANNEL }}'


jobs:
  deploy:
    #if: github.event.pull_request.merged == true
    permissions:
      contents: write
      id-token: write

    runs-on: ubuntu-latest
    environment: preprod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: preprod

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          project_id: "${{ secrets.PROJECT_ID }}"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: Read VERSION file
        id: getversion
        run: |
            sed -n 's/^appVersion:\(.*\)/\1/p' < chart/gateway-api/Chart.yaml > version
            echo "version=$(sed '/.*\"\(.*\)\".*/ s//\1/g' version)" >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run
        uses: actions-hub/gcloud@master
        id: deploy
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PROD_PROJECT_ID: ${{secrets.PROD_PROJECT_ID}}
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          GAR_NAME: ${{ secrets.GAR_NAME }}
          SERVICE_NAME: "${{ secrets.SERVICE_NAME }}"
          SERVICE_REGION: "${{ secrets.SERVICE_REGION }}"

        with:
          args: run services update '${{ env.SERVICE_NAME }}' --image='${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROD_PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:latest --region='${{ env.SERVICE_REGION }}' --project='${{ env.PROJECT_ID }}'

      - name: Run Notification
        id: runnotificationsent
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Deploying {{ env.GITHUB_REF_NAME }} branch to PREPROD ${{ job.status }}
        if: always()
